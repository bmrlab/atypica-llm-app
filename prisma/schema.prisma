// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAnalysts UserAnalyst[]
  userChats    UserChat[]
}

model Persona {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  source     String    @db.VarChar(255)
  tags       Json // 存储标签数组
  samples    Json // 存储小红书用户主页链接作为参考样本
  prompt     String    @db.Text
  userChatId Int?      @db.Int
  userChat   UserChat? @relation(fields: [userChatId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interviews AnalystInterview[]
}

model Analyst {
  id           Int     @id @default(autoincrement())
  role         String  @db.VarChar(255)
  topic        String  @db.Text
  report       String  @db.Text
  studySummary String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interviews   AnalystInterview[]
  userAnalysts UserAnalyst[]
}

model AnalystInterview {
  id                Int     @id @default(autoincrement())
  analystId         Int     @db.Int
  analyst           Analyst @relation(fields: [analystId], references: [id])
  personaId         Int     @db.Int
  persona           Persona @relation(fields: [personaId], references: [id])
  personaPrompt     String  @db.Text
  interviewerPrompt String  @db.Text
  messages          Json
  conclusion        String  @db.Text
  interviewToken    String? @db.VarChar(64)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([analystId, personaId])
}

model UserAnalyst {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  analystId Int
  analyst   Analyst @relation(fields: [analystId], references: [id])
  role      String  @default("admin") @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, analystId])
  @@index([userId])
  @@index([analystId])
}

model UserChat {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  title    String @db.VarChar(255)
  messages Json
  kind     String @db.VarChar(255) // scout | study | analyst | interview

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personas Persona[]
}
